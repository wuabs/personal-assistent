from dotenv import load_dotenv
load_dotenv()

from langchain.agents import initialize_agent, AgentType
from langchain.chat_models import ChatOpenAI
from langchain_huggingface import HuggingFaceEndpoint
from langchain.memory import ConversationBufferMemory
from tools import get_tools 
import warnings
warnings.filterwarnings("ignore")

# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
def get_llm(model_choice):
    if model_choice == "OpenAI GPT":
        return ChatOpenAI(model="gpt-4o", temperature=0.4)
    elif model_choice == "HuggingFace: flan-t5-xl":
        return HuggingFaceEndpoint(repo_id="google/flan-t5-xl", temperature=0.4)
    elif model_choice == "HuggingFace: Mistral-7B":
        return HuggingFaceEndpoint(repo_id="mistralai/Mistral-7B-Instruct-v0.1", temperature=0.4)
    return ChatOpenAI(temperature=0.4)

agent = None
chat_history = []
memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
def init_agent(model_choice):
    global agent, memory, chat_history
    memory.clear()
    chat_history = []
    llm = get_llm(model_choice)
    tools = get_tools(llm)
    agent = initialize_agent(
        tools=tools,
        llm=llm,
        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
        memory=memory,
        verbose=False
    )
    return f"–ú–æ–¥–µ–ª—å '{model_choice}' –∑–∞–≥—Ä—É–∂–µ–Ω–∞!"


def run_assistant():
    print("ü§ñ –õ–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")

    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    print("1. OpenAI GPT")
    print("2. HuggingFace: flan-t5-xl")
    print("3. HuggingFace: Mistral-7B")
    choice_map = {
        "1": "OpenAI GPT",
        "2": "HuggingFace: flan-t5-xl",
        "3": "HuggingFace: Mistral-7B"
    }
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (1/2/3): ").strip()
    model_choice = choice_map.get(choice, "OpenAI GPT")
    init_agent(model_choice)

    print("\nüîπ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'")
    print("–ü—Ä–∏–º–µ—Ä—ã:\n- –ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ò–ò –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏\n- –û–±–æ–±—â–∏ —Ç–µ–∫—Å—Ç: ...\n- –ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ —Ç–æ–º, —á—Ç–æ —è –≤–µ—Å—å –¥–µ–Ω—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∏—Ä–æ–≤–∞–ª–∞?\n- –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 15% –æ—Ç 8200?\n")

    while True:
        try:
            user_input = input("üó£ –í–≤–æ–¥: ")
            if user_input.lower() in ["exit", "quit", "–≤—ã—Ö–æ–¥"]:
                print("üëã –î–æ –≤—Å—Ç—Ä–µ—á–∏!")
                break
            response = agent.invoke(user_input)
            print(f"\nü§ñ –û—Ç–≤–µ—Ç:\n{response}\n")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    run_assistant()
